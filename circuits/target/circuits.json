{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":3468277050152052642,"abi":{"parameters":[{"name":"header","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":1024,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"body","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":25280,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"pubkey","type":{"kind":"struct","path":"zkemail::dkim::RSAPubkey","fields":[{"name":"modulus","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    // Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        // Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        // Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        // Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"61":{"source":"use sha256::sha256_var;\nuse std::{collections::bounded_vec::BoundedVec, hash::pedersen_hash};\nuse zkemail::{\n    dkim::RSAPubkey, headers::body_hash::get_body_hash, KEY_LIMBS_2048, Sequence\n};\n\nglobal MAX_EMAIL_HEADER_LENGTH: u32 = 1024;\nglobal MAX_EMAIL_BODY_LENGTH: u32 = 25280;\n\nfn main(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n    // body_hash_index: u32,\n    // dkim_header_sequence: Sequence,\n) -> pub [Field; 2] {\n     // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n    assert(body.len() <= MAX_EMAIL_BODY_LENGTH);\n\n    // ~ 86,553 constraints\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // // ~ 6,289 constraints\n    // // extract the body hash from the header\n    // let signed_body_hash = get_body_hash(header, dkim_header_sequence, body_hash_index);\n\n    // // ~ 113,962 constraints\n    // // hash the asserted body\n    // let computed_body_hash: [u8; 32] = sha256_var(body.storage, body.len() as u64);\n\n    // // compare the body hashes\n    // assert(\n    //     signed_body_hash == computed_body_hash,\n    //     \"SHA256 hash computed over body does not match body hash found in DKIM-signed header\",\n    // );\n\n    // ~ 10,255 constraints\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    [pubkey.hash(), email_nullifier]\n}\n\n#[test]\nfn test_main() {\n\n    let header: [Field; 1024] = [102,114,111,109,58,34,115,101,114,118,105,99,101,64,112,97,121,112,97,108,46,102,114,34,32,60,115,101,114,118,105,99,101,64,112,97,121,112,97,108,46,102,114,62,13,10,115,117,98,106,101,99,116,58,61,63,85,84,70,45,56,63,81,63,86,111,117,115,95,97,118,101,122,95,101,110,118,111,121,61,67,51,61,65,57,95,117,110,95,112,97,105,101,109,101,110,116,63,61,13,10,100,97,116,101,58,70,114,105,44,32,48,57,32,77,97,121,32,50,48,50,53,32,48,56,58,49,50,58,51,57,32,45,48,55,48,48,13,10,116,111,58,61,63,85,84,70,45,56,63,81,63,82,61,67,51,61,65,57,103,105,115,95,71,114,97,112,116,105,110,63,61,32,60,114,101,103,105,115,45,103,114,97,112,116,105,110,64,115,102,114,46,102,114,62,13,10,109,105,109,101,45,118,101,114,115,105,111,110,58,49,46,48,13,10,99,111,110,116,101,110,116,45,116,121,112,101,58,116,101,120,116,47,104,116,109,108,59,32,99,104,97,114,115,101,116,61,34,85,84,70,45,56,34,13,10,100,107,105,109,45,115,105,103,110,97,116,117,114,101,58,118,61,49,59,32,97,61,114,115,97,45,115,104,97,50,53,54,59,32,100,61,112,97,121,112,97,108,46,102,114,59,32,115,61,112,112,45,100,107,105,109,49,59,32,99,61,114,101,108,97,120,101,100,47,114,101,108,97,120,101,100,59,32,113,61,100,110,115,47,116,120,116,59,32,105,61,64,112,97,121,112,97,108,46,102,114,59,32,116,61,49,55,52,54,56,48,51,53,53,57,59,32,104,61,70,114,111,109,58,70,114,111,109,58,83,117,98,106,101,99,116,58,68,97,116,101,58,84,111,58,77,73,77,69,45,86,101,114,115,105,111,110,58,67,111,110,116,101,110,116,45,84,121,112,101,59,32,98,104,61,85,88,81,110,69,51,82,99,47,74,75,102,110,53,55,70,112,88,86,105,74,76,118,98,111,109,56,76,116,51,49,106,53,121,82,117,53,105,43,113,81,69,103,61,59,32,98,61,59,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n\n    // let body: [Field; 25280] = [60,    104,    116,    109,    108,    32,    100,    105,    114,    61,    51,    68,    34,    108,    116,    114,    34,    32,    108,    97,    110,    103,    61,    51,    68,    34,    102,    114,    34,    62,    61,    48,    65,    61,    48,    65,    32,    60,    104,    101,    97,    100,    62,    61,    48,    65,    32,    60,    109,    101,    116,    97,    32,    104,    116,    116,    112,    45,    101,    113,    117,    105,    118,    61,    51,    68,    34,    67,    111,    110,    116,    61,    13,    10,    101,    110,    116,    45,    84,    121,    112,    101,    34,    32,    99,    111,    110,    116,    101,    110,    116,    61,    51,    68,    34,    116,    101,    120,    116,    47,    104,    116,    109,    108,    59,    32,    99,    104,    97,    114,    115,    101,    116,    61,    51,    68,    117,    116,    102,    45,    56,    34,    32,    47,    62,    61,    48,    65,    32,    60,    109,    101,    116,    97,    32,    110,    97,    109,    101,    61,    51,    68,    34,    118,    105,    101,    61,    13,    10,    119,    112,    111,    114,    116,    34,    32,    99,    111,    110,    116,    101,    110,    116,    61,    51,    68,    34,    105,    110,    105,    116,    105,    97,    108,    45,    115,    99,    97,    108,    101,    61,    51,    68,    49,    46,    48,    44,    109,    105,    110,    105,    109,    117,    109,    45,    115,    99,    97,    108,    101,    61,    51,    68,    49,    46,    48,    44,    109,    97,    120,    105,    109,    117,    109,    45,    115,    99,    97,    108,    101,    61,    51,    68,    49,    61,    13,    10,    46,    48,    44,    119,    105,    100,    116,    104,    61,    51,    68,    100,    101,    118,    105,    99,    101,    45,    119,    105,    100,    116,    104,    44,    104,    101,    105,    103,    104,    116,    61,    51,    68,    100,    101,    118,    105,    99,    101,    45,    104,    101,    105,    103,    104,    116,    44,    116,    97,    114,    103,    101,    116,    45,    100,    101,    110,    115,    105,    116,    121,    100,    112,    105,    61,    51,    68,    100,    101,    118,    105,    99,    101,    45,    61,    13,    10,    100,    112,    105,    44,    117,    115,    101,    114,    45,    115,    99,    97,    108,    97,    98,    108,    101,    61,    51,    68,    110,    111,    34,    32,    47,    62,    61,    48,    65,    32,    60,    116,    105,    116,    108,    101,    62,    86,    111,    117,    115,    32,    97,    118,    101,    122,    32,    101,    110,    118,    111,    121,    61,    67,    51,    61,    65,    57,    32,    117,    110,    32,    112,    97,    105,    101,    109,    101,    110,    116,    60,    47,    61,    13,    10,    116,    105,    116,    108,    101,    62,    61,    48,    65,    32,    60,    115,    116,    121,    108,    101,    32,    116,    121,    112,    101,    61,    51,    68,    34,    116,    101,    120,    116,    47,    99,    115,    115,    34,    62,    61,    48,    65,    32,    47,    42,    42,    61,    48,    65,    32,    42,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    32,    70,    111,    110,    116,    115,    61,    48,    65,    32,    61,    13,    10,    42,    47,    61,    48,    65,    32,    47,    42,    32,    66,    111,    100,    121,    32,    116,    101,    120,    116,    32,    45,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    52,    53,    48,    32,    42,    47,    61,    48,    65,    32,    64,    102,    111,    110,    116,    45,    102,    97,    99,    101,    32,    123,    61,    48,    65,    32,    61,    13,    10,    32,    102,    111,    110,    116,    45,    102,    97,    109,    105,    108,    121,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    115,    116,    121,    108,    101,    58,    32,    110,    111,    114,    109,    97,    108,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    119,    61,    13,    10,    101,    105,    103,    104,    116,    58,    32,    52,    53,    48,    59,    61,    48,    65,    32,    115,    114,    99,    58,    32,    117,    114,    108,    40,    39,    104,    116,    116,    112,    115,    58,    47,    47,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    61,    13,    10,    47,    99,    47,    115,    121,    115,    116,    101,    109,    45,    116,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    97,    121,    111,    117,    116,    47,    102,    111,    110,    116,    115,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    66,    111,    111,    107,    61,    13,    10,    46,    119,    111,    102,    102,    50,    39,    41,    32,    102,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    50,    39,    41,    44,    61,    48,    65,    32,    47,    42,    77,    111,    100,    101,    114,    110,    101,    114,    32,    66,    114,    111,    119,    115,    101,    114,    115,    42,    47,    61,    48,    65,    32,    117,    114,    61,    13,    10,    108,    40,    39,    104,    116,    116,    112,    115,    58,    47,    47,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    47,    99,    47,    115,    121,    115,    116,    101,    109,    45,    116,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    61,    13,    10,    97,    121,    111,    117,    116,    47,    102,    111,    110,    116,    115,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    66,    111,    111,    107,    46,    119,    111,    102,    102,    39,    41,    32,    102,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    39,    41,    59,    61,    48,    65,    32,    61,    13,    10,    32,    47,    42,    32,    77,    111,    100,    101,    114,    110,    32,    66,    114,    111,    119,    115,    101,    114,    115,    32,    42,    47,    61,    48,    65,    32,    47,    42,    32,    70,    97,    108,    108,    98,    97,    99,    107,    32,    102,    111,    110,    116,    32,    102,    111,    114,    32,    45,    32,    77,    83,    32,    79,    117,    116,    108,    111,    111,    107,    32,    111,    108,    100,    101,    61,    13,    10,    114,    32,    118,    101,    114,    115,    105,    111,    110,    115,    32,    40,    50,    48,    48,    55,    44,    49,    51,    44,    32,    49,    54,    41,    42,    47,    61,    48,    65,    32,    109,    115,    111,    45,    102,    111,    110,    116,    45,    97,    108,    116,    58,    32,    39,    67,    97,    108,    105,    98,    114,    105,    39,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    13,    10,    61,    48,    65,    32,    47,    42,    32,    83,    117,    98,    104,    101,    97,    100,    108,    105,    110,    101,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    53,    48,    48,    32,    42,    47,    61,    48,    65,    32,    64,    102,    111,    110,    116,    45,    102,    97,    99,    101,    32,    123,    61,    48,    65,    32,    102,    61,    13,    10,    111,    110,    116,    45,    102,    97,    109,    105,    108,    121,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    115,    116,    121,    108,    101,    58,    32,    110,    111,    114,    109,    97,    108,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    119,    101,    105,    61,    13,    10,    103,    104,    116,    58,    32,    53,    48,    48,    59,    61,    48,    65,    32,    115,    114,    99,    58,    32,    117,    114,    108,    40,    39,    104,    116,    116,    112,    115,    58,    47,    47,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    47,    99,    61,    13,    10,    47,    115,    121,    115,    116,    101,    109,    45,    116,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    97,    121,    111,    117,    116,    47,    102,    111,    110,    116,    115,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    77,    101,    100,    105,    117,    109,    61,    13,    10,    46,    119,    111,    102,    102,    50,    39,    41,    32,    102,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    50,    39,    41,    44,    61,    48,    65,    32,    47,    42,    77,    111,    100,    101,    114,    110,    101,    114,    32,    66,    114,    111,    119,    115,    101,    114,    115,    42,    47,    61,    48,    65,    32,    117,    114,    61,    13,    10,    108,    40,    39,    104,    116,    116,    112,    115,    58,    47,    47,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    47,    99,    47,    115,    121,    115,    116,    101,    109,    45,    116,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    61,    13,    10,    97,    121,    111,    117,    116,    47,    102,    111,    110,    116,    115,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    77,    101,    100,    105,    117,    109,    46,    119,    111,    102,    102,    39,    41,    32,    102,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    39,    41,    59,    61,    48,    65,    32,    61,    13,    10,    32,    47,    42,    32,    77,    111,    100,    101,    114,    110,    32,    66,    114,    111,    119,    115,    101,    114,    115,    32,    42,    47,    61,    48,    65,    32,    47,    42,    32,    70,    97,    108,    108,    98,    97,    99,    107,    32,    102,    111,    110,    116,    32,    102,    111,    114,    32,    45,    32,    77,    83,    32,    79,    117,    116,    108,    111,    111,    107,    32,    111,    108,    61,    13,    10,    100,    101,    114,    32,    118,    101,    114,    115,    105,    111,    110,    115,    32,    40,    50,    48,    48,    55,    44,    49,    51,    44,    32,    49,    54,    41,    42,    47,    61,    48,    65,    32,    109,    115,    111,    45,    102,    111,    110,    116,    45,    97,    108,    116,    58,    32,    39,    67,    97,    108,    105,    98,    114,    105,    39,    59,    61,    48,    65,    32,    125,    61,    13,    10,    61,    48,    65,    61,    48,    65,    32,    47,    42,    32,    66,    117,    116,    116,    111,    110,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    55,    48,    48,    32,    42,    47,    61,    48,    65,    32,    64,    102,    111,    110,    116,    45,    102,    97,    99,    101,    32,    123,    61,    48,    65,    32,    102,    111,    110,    61,    13,    10,    116,    45,    102,    97,    109,    105,    108,    121,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    115,    116,    121,    108,    101,    58,    32,    110,    111,    114,    109,    97,    108,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    61,    13,    10,    116,    58,    32,    55,    48,    48,    59,    61,    48,    65,    32,    115,    114,    99,    58,    32,    117,    114,    108,    40,    39,    104,    116,    116,    112,    115,    58,    47,    47,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    47,    99,    47,    115,    61,    13,    10,    121,    115,    116,    101,    109,    45,    116,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    97,    121,    111,    117,    116,    47,    102,    111,    110,    116,    115,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    66,    111,    108,    100,    46,    119,    111,    102,    61,    13,    10,    102,    50,    39,    41,    32,    102,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    50,    39,    41,    44,    61,    48,    65,    32,    47,    42,    77,    111,    100,    101,    114,    110,    101,    114,    32,    66,    114,    111,    119,    115,    101,    114,    115,    42,    47,    61,    48,    65,    32,    117,    114,    108,    40,    39,    104,    116,    61,    13,    10,    116,    112,    115,    58,    47,    47,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    47,    99,    47,    115,    121,    115,    116,    101,    109,    45,    116,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    97,    121,    111,    117,    116,    61,    13,    10,    47,    102,    111,    110,    116,    115,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    66,    111,    108,    100,    46,    119,    111,    102,    102,    39,    41,    32,    102,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    39,    41,    59,    61,    48,    65,    32,    61,    13,    10,    47,    42,    32,    77,    111,    100,    101,    114,    110,    32,    66,    114,    111,    119,    115,    101,    114,    115,    32,    42,    47,    61,    48,    65,    32,    47,    42,    32,    70,    97,    108,    108,    98,    97,    99,    107,    32,    102,    111,    110,    116,    32,    102,    111,    114,    32,    45,    32,    77,    83,    32,    79,    117,    116,    108,    111,    111,    107,    32,    111,    108,    100,    101,    114,    32,    118,    101,    114,    61,    13,    10,    115,    105,    111,    110,    115,    32,    40,    50,    48,    48,    55,    44,    49,    51,    44,    32,    49,    54,    41,    42,    47,    61,    48,    65,    32,    109,    115,    111,    45,    102,    111,    110,    116,    45,    97,    108,    116,    58,    32,    39,    67,    97,    108,    105,    98,    114,    105,    39,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    61,    13,    10,    32,    47,    42,    32,    72,    101,    97,    100,    108,    105,    110,    101,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    57,    48,    48,    32,    42,    47,    61,    48,    65,    32,    64,    102,    111,    110,    116,    45,    102,    97,    99,    101,    32,    123,    61,    48,    65,    32,    102,    111,    110,    116,    45,    102,    97,    109,    105,    108,    61,    13,    10,    121,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    115,    116,    121,    108,    101,    58,    32,    110,    111,    114,    109,    97,    108,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    32,    57,    48,    48,    59,    61,    13,    10,    61,    48,    65,    32,    115,    114,    99,    58,    32,    117,    114,    108,    40,    39,    104,    116,    116,    112,    115,    58,    47,    47,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    47,    99,    47,    115,    121,    115,    116,    101,    109,    45,    116,    61,    13,    10,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    97,    121,    111,    117,    116,    47,    102,    111,    110,    116,    115,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    66,    108,    97,    99,    107,    46,    119,    111,    102,    102,    50,    39,    41,    32,    102,    61,    13,    10,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    50,    39,    41,    44,    61,    48,    65,    32,    47,    42,    77,    111,    100,    101,    114,    110,    101,    114,    32,    66,    114,    111,    119,    115,    101,    114,    115,    42,    47,    61,    48,    65,    32,    117,    114,    108,    40,    39,    104,    116,    116,    112,    115,    58,    47,    47,    61,    13,    10,    119,    119,    119,    46,    112,    97,    121,    112,    97,    108,    111,    98,    106,    101,    99,    116,    115,    46,    99,    111,    109,    47,    100,    105,    103,    105,    116,    97,    108,    97,    115,    115,    101,    116,    115,    47,    99,    47,    115,    121,    115,    116,    101,    109,    45,    116,    114,    105,    103,    103,    101,    114,    101,    100,    45,    101,    109,    97,    105,    108,    47,    110,    47,    108,    97,    121,    111,    117,    116,    47,    102,    111,    110,    116,    115,    61,    13,    10,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    47,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    83,    117,    98,    87,    101,    98,    45,    66,    108,    97,    99,    107,    46,    119,    111,    102,    102,    39,    41,    32,    102,    111,    114,    109,    97,    116,    40,    39,    119,    111,    102,    102,    39,    41,    59,    61,    48,    65,    32,    47,    42,    32,    77,    111,    61,    13,    10,    100,    101,    114,    110,    32,    66,    114,    111,    119,    115,    101,    114,    115,    32,    42,    47,    61,    48,    65,    32,    47,    42,    32,    70,    97,    108,    108,    98,    97,    99,    107,    32,    102,    111,    110,    116,    32,    102,    111,    114,    32,    45,    32,    77,    83,    32,    79,    117,    116,    108,    111,    111,    107,    32,    111,    108,    100,    101,    114,    32,    118,    101,    114,    115,    105,    111,    110,    115,    61,    13,    10,    32,    40,    50,    48,    48,    55,    44,    49,    51,    44,    32,    49,    54,    41,    42,    47,    61,    48,    65,    32,    109,    115,    111,    45,    102,    111,    110,    116,    45,    97,    108,    116,    58,    32,    39,    67,    97,    108,    105,    98,    114,    105,    39,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    47,    42,    61,    13,    10,    32,    69,    110,    100,    32,    45,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    32,    70,    111,    110,    116,    115,    32,    42,    47,    61,    48,    65,    61,    48,    65,    32,    47,    42,    42,    61,    48,    65,    32,    42,    32,    73,    109,    112,    111,    114,    116,    32,    111,    110,    108,    121,    32,    116,    104,    101,    32,    115,    116,    121,    108,    101,    115,    32,    114,    101,    113,    117,    61,    13,    10,    105,    114,    101,    100,    32,    102,    111,    114,    32,    69,    109,    97,    105,    108,    32,    116,    101,    109,    112,    108,    97,    116,    101,    115,    46,    61,    48,    65,    32,    42,    47,    61,    48,    65,    32,    64,    99,    104,    97,    114,    115,    101,    116,    32,    34,    85,    84,    70,    45,    56,    34,    59,    61,    48,    65,    61,    48,    65,    32,    104,    116,    109,    108,    61,    13,    10,    32,    123,    61,    48,    65,    32,    98,    111,    120,    45,    115,    105,    122,    105,    110,    103,    58,    32,    98,    111,    114,    100,    101,    114,    45,    98,    111,    120,    59,    61,    48,    65,    32,    98,    97,    99,    107,    103,    114,    111,    117,    110,    100,    58,    32,    35,    70,    53,    70,    55,    70,    65,    59,    61,    48,    65,    32,    61,    13,    10,    32,    99,    111,    108,    111,    114,    58,    32,    35,    48,    48,    48,    48,    48,    48,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    115,    105,    122,    101,    58,    32,    49,    52,    112,    120,    59,    61,    48,    65,    32,    108,    105,    110,    101,    45,    104,    101,    105,    103,    104,    116,    58,    32,    49,    46,    52,    50,    56,    54,    61,    13,    10,    59,    61,    48,    65,    32,    104,    101,    105,    103,    104,    116,    58,    32,    49,    48,    48,    37,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    42,    44,    61,    48,    65,    32,    42,    58,    98,    101,    102,    111,    114,    101,    44,    61,    48,    65,    32,    61,    13,    10,    32,    42,    58,    97,    102,    116,    101,    114,    32,    123,    61,    48,    65,    32,    98,    111,    120,    45,    115,    105,    122,    105,    110,    103,    58,    32,    105,    110,    104,    101,    114,    105,    116,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    98,    111,    100,    121,    32,    123,    61,    48,    65,    32,    61,    13,    10,    32,    102,    111,    110,    116,    45,    115,    105,    122,    101,    58,    32,    49,    52,    112,    120,    32,    33,    105,    109,    112,    111,    114,    116,    97,    110,    116,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    32,    52,    53,    48,    59,    61,    48,    65,    32,    108,    105,    110,    101,    61,    13,    10,    45,    104,    101,    105,    103,    104,    116,    58,    32,    49,    46,    52,    50,    56,    54,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    102,    97,    109,    105,    108,    121,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    44,    32,    39,    65,    118,    97,    110,    116,    32,    71,    97,    114,    100,    101,    39,    44,    32,    72,    101,    108,    118,    101,    61,    13,    10,    116,    105,    99,    97,    44,    32,    65,    114,    105,    97,    108,    59,    61,    48,    65,    32,    45,    119,    101,    98,    107,    105,    116,    45,    102,    111,    110,    116,    45,    115,    109,    111,    111,    116,    104,    105,    110,    103,    58,    32,    97,    110,    116,    105,    97,    108,    105,    97,    115,    101,    100,    59,    61,    48,    65,    32,    45,    109,    111,    122,    45,    61,    13,    10,    111,    115,    120,    45,    102,    111,    110,    116,    45,    115,    109,    111,    111,    116,    104,    105,    110,    103,    58,    32,    103,    114,    97,    121,    115,    99,    97,    108,    101,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    115,    109,    111,    111,    116,    104,    105,    110,    103,    58,    32,    97,    110,    116,    105,    97,    108,    105,    97,    115,    101,    100,    59,    61,    48,    65,    32,    61,    13,    10,    32,    98,    97,    99,    107,    103,    114,    111,    117,    110,    100,    58,    32,    35,    70,    53,    70,    55,    70,    65,    59,    61,    48,    65,    32,    99,    111,    108,    111,    114,    58,    32,    35,    48,    48,    48,    48,    48,    48,    59,    61,    48,    65,    32,    104,    101,    105,    103,    104,    116,    58,    32,    49,    48,    48,    37,    59,    61,    13,    10,    61,    48,    65,    32,    109,    97,    114,    103,    105,    110,    58,    32,    48,    59,    61,    48,    65,    32,    112,    97,    100,    100,    105,    110,    103,    58,    32,    48,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    97,    44,    61,    48,    65,    32,    61,    13,    10,    32,    97,    58,    118,    105,    115,    105,    116,    101,    100,    32,    123,    61,    48,    65,    32,    99,    111,    108,    111,    114,    58,    32,    35,    48,    48,    55,    52,    68,    69,    59,    61,    48,    65,    32,    116,    101,    120,    116,    45,    100,    101,    99,    111,    114,    97,    116,    105,    111,    110,    58,    32,    110,    111,    110,    101,    59,    61,    48,    65,    32,    61,    13,    10,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    32,    55,    48,    48,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    102,    97,    109,    105,    108,    121,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    44,    32,    39,    65,    118,    97,    110,    116,    32,    71,    97,    114,    100,    101,    61,    13,    10,    39,    44,    32,    72,    101,    108,    118,    101,    116,    105,    99,    97,    44,    32,    65,    114,    105,    97,    108,    59,    61,    48,    65,    32,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    97,    58,    97,    99,    116,    105,    118,    101,    44,    61,    48,    65,    32,    97,    58,    102,    61,    13,    10,    111,    99,    117,    115,    44,    61,    48,    65,    32,    97,    58,    104,    111,    118,    101,    114,    32,    123,    61,    48,    65,    32,    99,    111,    108,    111,    114,    58,    32,    35,    48,    48,    51,    48,    56,    55,    59,    61,    48,    65,    32,    116,    101,    120,    116,    45,    100,    101,    99,    111,    114,    97,    116,    105,    111,    110,    61,    13,    10,    58,    32,    117,    110,    100,    101,    114,    108,    105,    110,    101,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    112,    44,    61,    48,    65,    32,    108,    105,    44,    61,    48,    65,    32,    100,    100,    44,    61,    48,    65,    32,    100,    116,    44,    61,    48,    65,    61,    13,    10,    32,    108,    97,    98,    101,    108,    44,    61,    48,    65,    32,    105,    110,    112,    117,    116,    44,    61,    48,    65,    32,    116,    101,    120,    116,    97,    114,    101,    97,    44,    61,    48,    65,    32,    112,    114,    101,    44,    61,    48,    65,    32,    99,    111,    100,    101,    44,    61,    48,    65,    61,    13,    10,    32,    116,    97,    98,    108,    101,    32,    123,    61,    48,    65,    32,    102,    111,    110,    116,    45,    115,    105,    122,    101,    58,    32,    49,    52,    112,    120,    59,    61,    48,    65,    32,    108,    105,    110,    101,    45,    104,    101,    105,    103,    104,    116,    58,    32,    49,    46,    52,    50,    56,    54,    59,    61,    48,    65,    32,    61,    13,    10,    32,    102,    111,    110,    116,    45,    119,    101,    105,    103,    104,    116,    58,    32,    52,    53,    48,    59,    61,    48,    65,    32,    116,    101,    120,    116,    45,    116,    114,    97,    110,    115,    102,    111,    114,    109,    58,    32,    110,    111,    110,    101,    59,    61,    48,    65,    32,    102,    111,    110,    116,    45,    102,    97,    109,    61,    13,    10,    105,    108,    121,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    44,    32,    39,    65,    118,    97,    110,    116,    32,    71,    97,    114,    100,    101,    39,    44,    32,    72,    101,    108,    118,    101,    116,    105,    99,    97,    44,    32,    65,    114,    105,    97,    108,    59,    61,    48,    65,    32,    59,    61,    48,    65,    32,    61,    13,    10,    99,    111,    108,    111,    114,    58,    32,    35,    48,    48,    48,    48,    48,    48,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    47,    42,    32,    112,    114,    101,    118,    101,    110,    116,    32,    105,    79,    83,    32,    102,    111,    110,    116,    32,    117,    112,    115,    105,    122,    105,    110,    103,    32,    42,    47,    61,    48,    65,    32,    61,    13,    10,    32,    42,    32,    123,    61,    48,    65,    32,    45,    119,    101,    98,    107,    105,    116,    45,    116,    101,    120,    116,    45,    115,    105,    122,    101,    45,    97,    100,    106,    117,    115,    116,    58,    32,    110,    111,    110,    101,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    47,    42,    32,    102,    111,    114,    61,    13,    10,    99,    101,    32,    79,    117,    116,    108,    111,    111,    107,    46,    99,    111,    109,    32,    116,    111,    32,    104,    111,    110,    111,    114,    32,    108,    105,    110,    101,    45,    104,    101,    105,    103,    104,    116,    32,    42,    47,    61,    48,    65,    32,    46,    69,    120,    116,    101,    114,    110,    97,    108,    67,    108,    97,    115,    115,    32,    42,    32,    123,    61,    48,    65,    32,    61,    13,    10,    32,    108,    105,    110,    101,    45,    104,    101,    105,    103,    104,    116,    58,    32,    49,    48,    48,    37,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    116,    100,    32,    123,    61,    48,    65,    32,    109,    115,    111,    45,    108,    105,    110,    101,    45,    104,    101,    105,    103,    104,    116,    45,    114,    117,    108,    61,    13,    10,    101,    58,    32,    101,    120,    97,    99,    116,    108,    121,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    100,    105,    118,    91,    115,    116,    121,    108,    101,    42,    61,    51,    68,    34,    109,    97,    114,    103,    105,    110,    58,    32,    49,    54,    112,    120,    32,    48,    34,    93,    32,    123,    61,    48,    65,    32,    61,    13,    10,    32,    109,    97,    114,    103,    105,    110,    58,    32,    48,    32,    33,    105,    109,    112,    111,    114,    116,    97,    110,    116,    59,    61,    48,    65,    32,    125,    61,    48,    65,    61,    48,    65,    32,    46,    112,    112,    115,    97,    110,    115,    32,    123,    61,    48,    65,    32,    102,    111,    110,    116,    45,    102,    97,    109,    105,    108,    121,    61,    13,    10,    58,    32,    83,    117,    112,    114,    101,    109,    101,    76,    76,    84,    101,    115,    116,    44,    32,    39,    65,    118,    97,    110,    116,    32,    71,    97,    114,    100,    101,    39,    44,    32,    72,    101,    108,    118,    101,    116,    105,    99,    97,    44,    32,    65,    114,    105,    97,    108,    32,    33,    105,    109,    112,    111,    114,    116,    97,    110,    116,    59,    61,    48,    65,    32,    125,    61,    48,    65,    32,    61,    13,    10,    32,    60,    47,    115,    116,    121,    108,    101,    62,    61,    48,    65,    32,    60,    47,104,101,97,100,62,61,48,65,61,48,65,32,60,98,111,100,121,62,61,48,65,32,60,104,52,32,105,100,61,51,68,34,112,114,101,72,101,97,100,101,114,34,32,115,116,121,108,101,61,51,68,34,100,105,61,13,10,115,112,108,97,121,58,110,111,110,101,59,99,111,108,111,114,58,35,70,53,70,55,70,65,59,102,111,110,116,45,115,105,122,101,58,48,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,48,112,120,34,62,82,61,67,51,61,65,57,103,105,115,32,71,114,97,112,116,105,110,44,61,13,10,32,118,111,105,99,105,32,118,111,116,114,101,32,114,101,61,67,51,61,65,55,117,46,60,47,104,52,62,61,48,65,32,60,116,97,98,108,101,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,61,13,10,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,114,111,108,101,61,51,68,34,112,114,101,115,101,110,116,97,116,105,111,110,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,32,98,103,99,111,108,111,114,61,51,68,34,35,70,53,70,55,70,65,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,48,112,120,34,62,60,47,116,100,62,61,13,10,61,48,65,32,60,116,100,32,98,103,99,111,108,111,114,61,51,68,34,35,70,53,70,55,70,65,34,32,119,105,100,116,104,61,51,68,34,54,52,48,34,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,99,108,97,115,115,61,13,10,61,51,68,34,109,111,98,67,111,110,116,101,110,116,34,62,61,48,65,32,60,116,97,98,108,101,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,61,13,10,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,100,105,114,61,51,68,34,108,116,114,34,32,114,111,108,101,61,51,68,34,112,114,101,115,101,110,116,97,116,105,111,110,34,62,61,48,65,32,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,60,116,100,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,61,13,10,34,32,114,111,108,101,61,51,68,34,112,114,101,115,101,110,116,97,116,105,111,110,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,100,105,114,61,13,10,61,51,68,34,108,116,114,34,32,115,116,121,108,101,61,51,68,34,98,97,99,107,103,114,111,117,110,100,58,35,102,102,102,34,32,114,111,108,101,61,51,68,34,112,114,101,115,101,110,116,97,116,105,111,110,34,62,61,48,65,32,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,115,116,121,108,101,61,51,68,34,99,111,108,111,114,58,35,57,50,57,52,57,54,59,102,111,110,116,45,119,101,105,61,13,10,103,104,116,58,52,53,48,59,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,57,112,120,59,112,97,100,100,105,110,103,58,49,48,112,120,32,48,112,120,34,62,60,115,112,97,110,62,66,111,110,106,111,117,114,32,82,61,67,51,61,13,10,61,65,57,103,105,115,32,71,114,97,112,116,105,110,44,60,47,115,112,97,110,62,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,61,13,10,34,48,34,32,100,105,114,61,51,68,34,108,116,114,34,32,114,111,108,101,61,51,68,34,112,114,101,115,101,110,116,97,116,105,111,110,34,62,61,48,65,32,60,116,98,111,61,13,10,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,50,52,112,120,32,50,52,112,120,32,52,48,112,120,32,50,52,112,120,34,62,60,105,109,103,32,115,114,99,61,51,68,34,61,13,10,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,111,98,106,101,99,116,115,46,99,111,109,47,100,105,103,105,116,97,108,97,115,115,101,116,115,47,99,47,115,121,115,116,101,109,45,116,114,105,103,103,101,114,101,100,45,101,109,97,105,108,47,110,47,108,97,121,111,61,13,10,117,116,47,105,109,97,103,101,115,47,112,112,101,47,112,112,45,108,111,103,111,95,120,50,46,112,110,103,34,32,115,116,121,108,101,61,51,68,34,100,105,115,112,108,97,121,58,98,108,111,99,107,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,61,13,10,34,53,49,34,32,104,101,105,103,104,116,61,51,68,34,53,49,34,32,97,108,116,61,51,68,34,80,97,121,80,97,108,34,32,116,105,116,108,101,61,51,68,34,80,97,121,80,97,108,34,32,47,62,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,61,13,10,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,100,105,114,61,51,68,34,108,116,114,34,32,114,111,108,101,61,13,10,61,51,68,34,112,114,101,115,101,110,116,97,116,105,111,110,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,119,105,100,116,104,61,51,68,34,54,52,48,34,32,118,97,108,105,103,110,61,51,68,34,116,111,112,34,62,61,48,65,32,60,116,97,98,108,101,32,119,61,13,10,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,114,111,108,101,61,51,68,34,112,114,101,115,61,13,10,101,110,116,97,116,105,111,110,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,13,10,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,50,52,112,120,61,13,10,32,52,48,112,120,32,50,52,112,120,59,119,111,114,100,45,98,114,101,97,107,58,98,114,101,97,107,45,119,111,114,100,34,62,61,48,65,32,60,112,32,99,108,97,115,115,61,13,10,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,52,50,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,52,54,112,120,59,102,111,110,116,45,119,101,105,103,104,116,58,57,48,48,59,99,111,108,111,114,58,61,13,10,35,48,48,48,59,109,97,114,103,105,110,58,48,34,62,60,115,112,97,110,62,86,111,117,115,32,97,118,101,122,32,101,110,118,111,121,61,67,51,61,65,57,32,48,44,48,49,61,67,50,61,65,48,61,69,50,61,56,50,61,65,67,61,67,50,61,65,48,69,85,82,32,61,67,51,61,13,10,61,65,48,32,82,61,67,51,61,65,57,103,105,115,32,71,114,97,112,116,105,110,46,60,47,115,112,97,110,62,60,47,112,62,61,48,65,32,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,61,13,10,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,114,111,108,101,61,51,68,34,112,114,101,115,101,110,116,97,116,105,111,110,34,62,61,48,65,32,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,60,116,100,61,13,10,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,50,52,112,120,32,50,52,112,120,32,50,52,112,120,34,62,61,48,65,32,60,116,97,98,108,101,61,13,10,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,118,97,108,105,103,110,61,51,68,34,116,111,112,34,62,61,48,65,32,61,13,10,32,60,112,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,50,48,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,50,56,112,120,59,99,111,108,111,114,58,35,48,48,48,48,48,48,59,109,97,114,61,13,10,103,105,110,58,48,34,32,100,105,114,61,51,68,34,108,116,114,34,62,60,115,112,97,110,62,68,61,67,51,61,65,57,116,97,105,108,115,32,100,101,32,108,97,32,116,114,97,110,115,97,99,116,105,111,110,60,47,115,112,97,110,62,60,47,112,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,13,10,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,61,13,10,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,61,13,10,34,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,49,52,112,120,32,49,52,112,120,32,49,52,112,120,34,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,105,100,61,51,68,34,99,97,114,116,68,101,116,97,105,108,115,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,13,10,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,100,105,114,61,51,68,34,108,116,114,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,34,62,61,48,65,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,61,13,10,62,61,48,65,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,49,48,112,120,32,49,48,112,120,59,116,101,120,116,45,97,61,13,10,108,105,103,110,58,108,101,102,116,59,98,111,114,100,101,114,45,116,111,112,58,48,112,120,59,119,105,100,116,104,58,53,48,37,59,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,116,111,112,34,62,60,115,112,97,110,62,60,115,116,114,111,110,103,62,78,117,109,61,67,51,61,13,10,61,65,57,114,111,32,100,101,32,116,114,97,110,115,97,99,116,105,111,110,60,47,115,116,114,111,110,103,62,60,47,115,112,97,110,62,60,98,114,32,47,62,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,46,99,111,109,61,13,10,47,109,121,97,99,99,111,117,110,116,47,97,99,116,105,118,105,116,105,101,115,47,100,101,116,97,105,108,115,47,54,78,50,48,49,51,56,48,56,78,53,56,55,54,51,50,88,61,51,70,115,111,117,114,99,101,61,51,68,112,50,112,95,101,109,97,105,108,95,103,101,116,95,100,101,61,13,10,116,97,105,108,115,38,118,61,51,68,49,37,50,67,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,37,50,67,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,37,50,67,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,61,13,10,105,103,110,61,51,68,82,84,48,48,48,52,49,55,37,50,67,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,61,13,10,37,50,67,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,37,50,67,82,84,48,48,48,52,49,55,38,99,110,97,99,61,51,68,70,61,13,10,82,37,50,67,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,37,50,67,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,37,50,67,85,75,61,13,10,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,37,50,67,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,61,13,10,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,37,50,67,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,61,13,10,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,37,50,67,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,61,13,10,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,37,50,67,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,50,61,13,10,67,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,99,108,37,50,67,99,108,38,109,99,104,110,61,51,68,101,109,37,50,67,101,109,38,115,61,51,68,99,105,37,50,67,99,105,38,109,97,105,108,61,51,68,115,121,115,37,50,67,115,121,115,38,97,112,112,86,101,61,13,10,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,37,50,67,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,117,110,100,101,102,105,110,101,100,37,50,67,80,65,89,80,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,61,13,10,52,52,49,51,37,50,67,49,48,52,48,51,56,37,50,67,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,100,101,116,97,105,108,115,95,54,110,50,48,49,51,56,48,56,110,53,56,55,54,51,61,13,10,50,120,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,62,60,115,112,97,110,62,54,78,50,48,49,51,56,48,56,78,53,56,55,54,51,50,88,60,47,115,112,97,110,62,60,47,97,62,60,47,116,100,62,61,48,65,32,61,13,10,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,49,48,112,120,32,49,48,112,120,59,116,101,120,116,45,97,108,105,103,110,58,114,105,103,104,116,59,98,111,114,100,61,13,10,101,114,45,116,111,112,58,48,112,120,59,119,105,100,116,104,58,53,48,37,59,118,101,114,116,105,99,97,108,45,97,108,105,103,110,58,116,111,112,34,62,60,115,112,97,110,62,60,115,116,114,111,110,103,62,68,97,116,101,32,100,101,32,108,97,32,116,114,97,110,115,97,99,116,105,61,13,10,111,110,60,47,115,116,114,111,110,103,62,60,47,115,112,97,110,62,60,98,114,32,47,62,60,115,112,97,110,62,57,32,109,97,105,32,50,48,50,53,60,47,115,112,97,110,62,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,61,13,10,101,62,61,48,65,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,61,13,10,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,49,48,112,120,32,50,48,112,120,34,62,61,48,65,32,61,13,10,32,60,104,114,32,115,116,121,108,101,61,51,68,34,98,111,114,100,101,114,45,116,111,112,58,49,112,120,32,115,111,108,105,100,32,35,67,54,67,54,67,54,34,32,47,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,60,61,13,10,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,49,52,112,120,32,49,52,112,120,32,49,52,112,120,34,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,105,100,61,51,68,34,99,97,114,116,68,101,116,97,105,108,115,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,61,13,10,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,100,105,114,61,51,68,34,108,116,114,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,112,97,100,100,105,110,103,58,48,112,120,32,49,48,112,61,13,10,120,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,62,60,115,116,114,111,110,103,62,65,114,103,101,110,116,32,101,110,118,111,121,61,67,51,61,65,57,60,61,13,10,47,115,116,114,111,110,103,62,60,47,116,100,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,114,105,103,104,116,34,62,60,115,112,97,110,61,13,10,32,99,108,97,115,115,61,51,68,34,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,99,111,108,111,114,58,35,48,48,48,48,48,48,34,62,60,115,112,97,110,62,48,44,48,49,61,67,50,61,65,48,61,69,50,61,56,50,61,13,10,61,65,67,61,67,50,61,65,48,69,85,82,60,47,115,112,97,110,62,60,47,115,112,97,110,62,60,98,114,32,47,62,60,115,112,97,110,32,99,108,97,115,115,61,51,68,34,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,99,111,61,13,10,108,111,114,58,35,48,48,48,48,48,48,34,62,60,115,112,97,110,62,61,51,68,32,48,44,48,49,61,67,50,61,65,48,36,61,67,50,61,65,48,85,83,68,60,47,115,112,97,110,62,60,47,115,112,97,110,62,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,61,13,10,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,49,52,61,13,10,112,120,32,49,52,112,120,32,49,52,112,120,34,62,61,48,65,32,60,116,97,98,108,101,32,105,100,61,51,68,34,99,97,114,116,68,101,116,97,105,108,115,34,32,99,101,108,108,61,13,10,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,100,105,114,61,51,68,34,108,116,114,34,32,115,116,121,61,13,10,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,112,97,100,100,105,110,103,58,48,112,120,32,49,48,112,120,34,62,61,48,65,32,60,116,98,61,13,10,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,62,60,115,116,114,111,110,103,62,70,114,97,105,115,60,47,115,116,114,111,110,103,62,60,47,116,100,62,61,48,65,32,60,116,61,13,10,100,32,97,108,105,103,110,61,51,68,34,114,105,103,104,116,34,62,48,44,48,48,61,67,50,61,65,48,36,61,67,50,61,65,48,85,83,68,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,60,61,13,10,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,61,13,10,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,13,10,61,48,65,32,60,116,100,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,50,52,112,120,61,13,10,32,50,52,112,120,32,50,52,112,120,34,62,61,48,65,32,60,112,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,102,111,110,61,13,10,116,45,115,105,122,101,58,49,52,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,50,48,112,120,59,99,111,108,111,114,58,35,48,48,48,48,48,48,59,109,97,114,103,105,110,58,48,59,119,111,114,100,45,98,114,101,97,107,58,98,114,101,97,107,45,119,111,114,100,34,32,61,13,10,100,105,114,61,51,68,34,108,116,114,34,62,60,115,112,97,110,62,80,97,121,61,67,51,61,65,57,32,97,118,101,99,61,67,50,61,65,48,58,60,47,115,112,97,110,62,60,47,112,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,13,10,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,61,13,10,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,61,13,10,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,60,116,100,32,115,116,121,108,61,13,10,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,49,52,112,120,32,49,52,112,120,32,49,52,112,120,34,62,61,48,65,32,60,116,97,98,108,101,32,105,100,61,13,10,61,51,68,34,99,97,114,116,68,101,116,97,105,108,115,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,61,13,10,49,48,48,37,34,32,100,105,114,61,51,68,34,108,116,114,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,112,97,100,100,105,110,103,58,48,112,120,32,49,48,112,120,34,62,61,48,65,32,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,62,60,115,112,97,110,32,99,108,97,115,115,61,51,68,34,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,99,111,108,111,61,13,10,114,58,35,48,48,48,48,48,48,34,62,60,115,112,97,110,62,83,111,108,100,101,32,80,97,121,80,97,108,32,40,85,83,68,41,60,47,115,112,97,110,62,60,47,115,112,97,110,62,60,47,116,100,62,61,48,65,32,61,13,10,32,60,116,100,32,97,108,105,103,110,61,51,68,34,114,105,103,104,116,34,62,48,44,48,49,61,67,50,61,65,48,36,61,67,50,61,65,48,85,83,68,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,61,13,10,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,49,48,112,120,32,50,48,61,13,10,112,120,34,62,61,48,65,32,60,104,114,32,115,116,121,108,101,61,51,68,34,98,111,114,100,101,114,45,116,111,112,58,49,112,120,32,115,111,108,105,100,32,35,67,54,67,54,67,61,13,10,54,34,32,47,62,61,48,65,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,61,13,10,34,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,49,52,112,120,32,49,52,112,120,32,49,52,112,120,34,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,105,100,61,51,68,34,99,97,114,116,68,101,116,97,105,108,115,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,99,101,108,108,80,97,100,100,105,110,103,61,13,10,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,100,105,114,61,51,68,34,108,116,114,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,52,112,120,59,112,97,100,100,61,13,10,105,110,103,58,48,112,120,32,49,48,112,120,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,62,60,115,116,114,111,110,103,62,86,111,117,115,32,97,118,101,61,13,10,122,32,112,97,121,61,67,51,61,65,57,60,47,115,116,114,111,110,103,62,60,47,116,100,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,61,13,10,114,105,103,104,116,34,62,48,44,48,49,61,67,50,61,65,48,36,61,67,50,61,65,48,85,83,68,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,61,13,10,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,61,13,10,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,49,48,112,120,32,50,48,112,120,34,62,61,48,65,32,61,13,10,32,60,104,114,32,115,116,121,108,101,61,51,68,34,98,111,114,100,101,114,45,116,111,112,58,49,112,120,32,100,111,116,116,101,100,32,35,67,54,67,54,67,54,34,32,47,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,61,13,10,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,116,114,62,61,48,65,32,60,116,100,32,119,105,100,116,104,61,51,68,34,54,52,48,34,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,61,13,10,98,111,114,100,101,114,61,51,68,34,48,34,32,100,105,114,61,51,68,34,108,116,114,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,13,10,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,60,116,114,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,118,97,108,105,103,110,61,51,68,34,116,111,112,61,13,10,34,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,51,48,112,120,32,50,52,112,120,32,51,48,112,120,32,50,52,112,120,34,62,60,105,109,103,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,111,98,106,101,99,61,13,10,116,115,46,99,111,109,47,100,105,103,105,116,97,108,97,115,115,101,116,115,47,99,47,115,121,115,116,101,109,45,116,114,105,103,103,101,114,101,100,45,101,109,97,105,108,47,110,47,108,97,121,111,117,116,47,105,109,97,103,101,115,47,112,112,101,47,112,112,45,108,111,103,111,95,120,61,13,10,50,46,112,110,103,34,32,119,105,100,116,104,61,51,68,34,52,48,34,32,104,101,105,103,104,116,61,51,68,34,52,48,34,32,115,116,121,108,101,61,51,68,34,100,105,115,112,108,97,121,58,98,108,111,99,107,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,97,108,116,61,13,10,61,51,68,34,80,97,121,80,97,108,34,32,47,62,61,48,65,32,60,104,114,32,99,108,97,115,115,61,51,68,34,102,111,111,116,101,114,68,105,118,61,13,10,105,100,101,114,34,32,115,116,121,108,101,61,51,68,34,98,111,114,100,101,114,45,116,111,112,58,49,112,120,32,115,111,108,105,100,32,35,67,54,67,54,67,54,59,109,97,114,103,105,110,58,51,48,112,120,32,48,112,120,32,48,112,120,32,48,112,120,34,32,47,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,61,13,10,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,60,47,116,97,98,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,13,10,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,105,100,61,51,68,34,98,111,100,121,95,102,111,111,116,101,114,95,108,105,110,107,115,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,61,13,10,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,115,116,121,108,101,61,51,68,34,109,97,114,103,105,110,45,98,111,116,116,111,109,58,48,112,120,34,32,100,105,114,61,51,68,34,108,116,114,34,62,61,13,10,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,49,61,13,10,54,112,120,59,112,97,100,100,105,110,103,58,49,48,112,120,32,50,52,112,120,32,50,51,112,120,32,50,52,112,120,59,99,111,108,111,114,58,35,48,48,49,52,51,53,59,102,111,110,116,45,119,101,105,103,104,116,58,52,48,48,34,32,99,108,97,115,115,61,51,68,34,112,112,115,61,13,10,97,110,115,34,62,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,46,99,111,109,47,102,114,47,115,109,97,114,116,104,101,108,112,47,104,111,109,101,61,51,70,118,61,51,68,49,38,117,116,109,95,115,111,117,114,99,101,61,13,10,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,61,13,10,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,61,13,10,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,61,13,10,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,61,13,10,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,61,13,10,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,61,13,10,114,101,102,61,51,68,115,109,97,114,116,104,101,108,112,95,104,111,109,101,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,99,111,108,111,114,58,35,48,48,61,13,10,55,52,68,69,59,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,32,97,108,116,61,51,68,34,72,101,108,112,32,38,97,109,112,59,32,67,111,110,116,97,99,116,34,62,65,105,100,101,32,101,116,32,67,111,110,116,97,99,116,60,47,97,62,60,115,61,13,10,112,97,110,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,53,112,120,34,62,32,124,32,60,47,115,112,97,110,62,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,46,99,111,109,47,102,61,13,10,114,47,119,101,98,97,112,112,115,47,109,112,112,47,112,97,121,112,97,108,45,115,97,102,101,116,121,45,97,110,100,45,115,101,99,117,114,105,116,121,61,51,70,118,61,51,68,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,61,13,10,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,61,13,10,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,61,13,10,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,61,13,10,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,61,13,10,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,61,13,10,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,109,112,112,95,112,97,121,112,97,61,13,10,108,45,115,97,102,101,116,121,45,97,110,100,45,115,101,99,117,114,105,116,121,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,99,111,108,111,114,58,35,48,61,13,10,48,55,52,68,69,59,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,32,97,108,116,61,51,68,34,83,101,99,117,114,105,116,121,34,62,83,61,67,51,61,65,57,99,117,114,105,116,61,67,51,61,65,57,60,47,97,62,60,115,112,97,110,32,115,116,61,13,10,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,48,112,120,32,53,112,120,34,62,32,124,32,60,47,115,112,97,110,62,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,46,99,111,109,47,102,114,47,119,101,98,97,61,13,10,112,112,115,47,109,112,112,47,109,111,98,105,108,101,45,97,112,112,115,61,51,70,118,61,51,68,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,61,13,10,110,61,51,68,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,61,13,10,52,49,55,38,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,61,13,10,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,61,13,10,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,61,13,10,38,101,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,61,13,10,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,109,112,112,95,109,111,98,105,108,101,45,97,112,112,115,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,61,13,10,110,107,34,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,99,111,108,111,114,58,35,48,48,55,52,68,69,59,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,32,97,108,116,61,51,68,34,65,112,61,13,10,112,115,34,62,65,112,112,108,105,115,60,47,97,62,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,45,98,61,13,10,111,116,116,111,109,58,49,48,112,120,59,112,97,100,100,105,110,103,45,116,111,112,58,48,112,120,59,112,97,100,100,105,110,103,45,108,101,102,116,58,49,49,112,120,59,112,97,100,100,105,110,103,45,114,105,103,104,116,58,50,48,112,120,34,62,61,48,65,32,61,13,10,32,60,116,97,98,108,101,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,61,13,10,34,32,100,105,114,61,51,68,34,108,116,114,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,61,13,10,32,118,97,108,105,103,110,61,51,68,34,109,105,100,100,108,101,34,32,119,105,100,116,104,61,51,68,34,53,53,34,62,60,97,32,105,100,61,51,68,34,116,119,105,116,116,101,114,34,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,116,119,105,116,116,101,114,46,99,61,13,10,111,109,47,80,97,121,80,97,108,61,51,70,118,61,51,68,49,37,50,67,48,46,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,61,13,10,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,61,13,10,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,61,13,10,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,61,13,10,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,13,10,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,61,13,10,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,116,119,105,116,116,101,114,46,99,111,109,95,112,97,121,112,97,108,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,61,13,10,97,110,107,34,62,60,105,109,103,32,98,111,114,100,101,114,61,51,68,34,48,34,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,111,98,106,101,99,116,115,46,99,111,109,47,100,105,103,105,116,97,108,97,115,115,101,116,115,47,99,61,13,10,47,115,121,115,116,101,109,45,116,114,105,103,103,101,114,101,100,45,101,109,97,105,108,47,110,47,108,97,121,111,117,116,47,105,109,97,103,101,115,47,113,117,97,110,116,117,109,95,108,101,97,112,47,102,111,111,116,101,114,45,115,111,99,105,97,108,45,105,99,111,110,115,95,120,46,61,13,10,112,110,103,34,32,119,105,100,116,104,61,51,68,34,51,50,34,32,104,101,105,103,104,116,61,51,68,34,51,50,34,32,115,116,121,108,101,61,51,68,34,100,105,115,112,108,97,121,58,98,108,111,99,107,34,32,97,108,116,61,51,68,34,84,119,105,116,116,101,114,34,32,47,62,60,61,13,10,47,97,62,60,47,116,100,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,118,97,108,105,103,110,61,51,68,61,13,10,34,109,105,100,100,108,101,34,32,119,105,100,116,104,61,51,68,34,53,53,34,62,60,97,32,105,100,61,51,68,34,105,110,115,116,97,103,114,97,109,34,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,105,110,115,116,97,103,114,97,109,46,99,111,109,61,13,10,47,112,97,121,112,97,108,47,61,51,70,118,61,51,68,49,37,50,67,48,46,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,82,61,13,10,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,99,61,13,10,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,61,13,10,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,61,13,10,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,61,13,10,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,38,120,116,61,13,10,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,119,119,119,46,105,110,115,116,97,103,114,97,109,46,99,111,109,95,112,97,121,112,97,108,34,32,116,97,114,103,101,116,61,51,68,34,61,13,10,95,98,108,97,110,107,34,62,60,105,109,103,32,98,111,114,100,101,114,61,51,68,34,48,34,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,47,112,97,121,112,97,108,111,98,106,101,99,116,115,46,99,111,109,47,100,105,103,105,116,97,108,97,115,115,101,116,115,47,99,47,61,13,10,115,121,115,116,101,109,45,116,114,105,103,103,101,114,101,100,45,101,109,97,105,108,47,110,47,108,97,121,111,117,116,47,105,109,97,103,101,115,47,113,117,97,110,116,117,109,95,108,101,97,112,47,102,111,111,116,101,114,45,115,111,99,105,97,108,45,105,99,111,110,115,95,105,110,115,61,13,10,116,97,103,114,97,109,46,112,110,103,34,32,119,105,100,116,104,61,51,68,34,51,50,34,32,104,101,105,103,104,116,61,51,68,34,51,50,34,32,115,116,121,108,101,61,51,68,34,100,105,115,112,108,97,121,58,98,108,111,99,107,34,32,97,108,116,61,51,68,34,73,110,115,116,97,61,13,10,103,114,97,109,34,32,47,62,60,47,97,62,60,47,116,100,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,34,99,101,110,116,101,114,34,32,61,13,10,118,97,108,105,103,110,61,51,68,34,109,105,100,100,108,101,34,32,119,105,100,116,104,61,51,68,34,53,53,34,62,60,97,32,105,100,61,51,68,34,102,97,99,101,98,111,111,107,34,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,102,97,99,101,98,61,13,10,111,111,107,46,99,111,109,47,80,97,121,80,97,108,85,83,65,61,51,70,118,61,51,68,49,37,50,67,48,46,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,61,13,10,112,97,105,103,110,61,51,68,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,61,13,10,84,48,48,48,52,49,55,38,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,61,13,10,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,61,13,10,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,61,13,10,109,97,105,108,38,101,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,61,13,10,80,65,89,80,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,119,119,119,46,102,97,99,101,98,111,111,107,46,99,111,109,95,112,97,121,112,97,108,117,115,97,34,61,13,10,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,62,60,105,109,103,32,98,111,114,100,101,114,61,51,68,34,48,34,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,47,112,97,121,112,97,108,111,98,106,101,99,116,115,46,99,111,109,47,100,105,103,105,116,61,13,10,97,108,97,115,115,101,116,115,47,99,47,115,121,115,116,101,109,45,116,114,105,103,103,101,114,101,100,45,101,109,97,105,108,47,110,47,108,97,121,111,117,116,47,105,109,97,103,101,115,47,113,117,97,110,116,117,109,95,108,101,97,112,47,102,111,111,116,101,114,45,115,111,99,105,97,61,13,10,108,45,105,99,111,110,115,95,102,97,99,101,98,111,111,107,46,112,110,103,34,32,119,105,100,116,104,61,51,68,34,51,50,34,32,104,101,105,103,104,116,61,51,68,34,51,50,34,32,115,116,121,108,101,61,51,68,34,100,105,115,112,108,97,121,58,98,108,111,99,107,34,32,97,108,61,13,10,116,61,51,68,34,70,97,99,101,98,111,111,107,34,32,47,62,60,47,97,62,60,47,116,100,62,61,48,65,32,60,116,100,32,97,108,105,103,110,61,51,68,61,13,10,34,99,101,110,116,101,114,34,32,118,97,108,105,103,110,61,51,68,34,109,105,100,100,108,101,34,32,119,105,100,116,104,61,51,68,34,53,53,34,62,60,97,32,105,100,61,51,68,34,108,105,110,107,101,100,105,110,34,32,104,114,101,102,61,51,68,34,104,116,116,112,58,47,47,119,61,13,10,119,119,46,108,105,110,107,101,100,105,110,46,99,111,109,47,99,111,109,112,97,110,121,47,49,52,56,50,61,51,70,116,114,107,61,51,68,116,121,97,104,38,118,61,51,68,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,13,10,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,61,13,10,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,61,13,10,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,61,13,10,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,61,13,10,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,61,13,10,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,99,111,109,112,97,110,121,95,49,52,56,61,13,10,50,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,62,60,105,109,103,32,98,111,114,100,101,114,61,51,68,34,48,34,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,47,112,97,121,112,97,108,111,98,106,101,99,116,115,46,99,111,109,47,100,105,103,61,13,10,105,116,97,108,97,115,115,101,116,115,47,99,47,115,121,115,116,101,109,45,116,114,105,103,103,101,114,101,100,45,101,109,97,105,108,47,110,47,108,97,121,111,117,116,47,105,109,97,103,101,115,47,113,117,97,110,116,117,109,95,108,101,97,112,47,102,111,111,116,101,114,45,115,111,99,61,13,10,105,97,108,45,105,99,111,110,115,95,108,105,110,107,101,100,105,110,46,112,110,103,34,32,119,105,100,116,104,61,51,68,34,51,50,34,32,104,101,105,103,104,116,61,51,68,34,51,50,34,32,115,116,121,108,101,61,51,68,34,100,105,115,112,108,97,121,58,98,108,111,99,107,34,32,61,13,10,97,108,116,61,51,68,34,76,105,110,107,101,100,73,110,34,32,47,62,60,47,97,62,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,13,10,61,48,65,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,61,13,10,108,101,62,61,48,65,32,60,116,97,98,108,101,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,119,61,13,10,105,100,116,104,61,51,68,34,49,48,48,37,34,32,115,116,121,108,101,61,51,68,34,112,97,100,100,105,110,103,58,53,112,120,32,50,52,112,120,32,50,48,112,120,32,50,52,112,120,34,62,61,48,65,32,60,116,98,111,100,121,62,61,13,10,61,48,65,32,60,116,114,62,61,48,65,32,60,116,100,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,119,105,100,116,104,61,51,68,34,54,61,13,10,48,48,34,62,61,48,65,32,60,116,97,98,108,101,32,105,100,61,51,68,34,104,105,100,101,70,111,114,84,101,120,116,70,111,111,116,101,114,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,61,13,10,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,60,116,61,13,10,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,60,116,100,32,115,116,121,108,101,61,13,10,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,49,54,112,120,59,112,97,100,100,105,110,103,58,54,112,120,32,48,112,120,34,62,61,48,65,32,61,13,10,32,60,112,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,109,97,114,103,105,110,58,48,34,32,100,105,114,61,51,68,34,108,116,114,34,62,61,13,10,60,115,112,97,110,62,78,111,117,115,32,110,111,117,115,32,101,110,103,97,103,101,111,110,115,32,61,67,51,61,65,48,32,108,117,116,116,101,114,32,99,111,110,116,114,101,32,108,39,101,110,118,111,105,32,100,39,101,109,97,105,108,115,32,102,114,97,117,100,117,108,101,117,120,46,61,13,10,32,76,101,115,32,101,109,97,105,108,115,32,80,97,121,80,97,108,32,99,111,110,116,105,101,110,110,101,110,116,32,116,111,117,106,111,117,114,115,32,118,111,116,114,101,32,110,111,109,32,99,111,109,112,108,101,116,46,32,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,61,13,10,58,47,47,119,119,119,46,112,97,121,112,97,108,46,99,111,109,47,102,114,47,119,101,98,97,112,112,115,47,109,112,112,47,112,104,105,115,104,105,110,103,61,51,70,118,61,51,68,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,61,13,10,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,61,13,10,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,61,13,10,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,61,13,10,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,61,13,10,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,61,13,10,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,109,112,112,95,112,104,105,115,104,61,13,10,105,110,103,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,32,115,116,121,108,101,61,51,68,34,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,62,65,112,112,114,101,110,101,122,32,61,67,51,61,65,48,32,114,101,99,111,110,61,13,10,110,97,61,67,51,61,65,69,116,114,101,32,108,101,115,32,116,101,110,116,97,116,105,118,101,115,32,100,101,32,112,104,105,115,104,105,110,103,60,47,97,62,46,60,47,115,112,97,110,62,60,47,112,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,61,13,10,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,105,100,61,51,68,34,104,105,100,101,70,61,13,10,111,114,84,101,120,116,70,111,111,116,101,114,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,61,13,10,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,49,54,112,120,59,112,97,100,100,105,110,103,58,54,112,61,13,10,120,32,48,112,120,34,62,61,48,65,32,60,112,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,61,13,10,101,58,49,50,112,120,59,109,97,114,103,105,110,58,48,34,32,100,105,114,61,51,68,34,108,116,114,34,62,60,115,112,97,110,62,77,101,114,99,105,32,100,101,32,110,101,32,112,97,115,32,114,61,67,51,61,65,57,112,111,110,100,114,101,32,61,67,51,61,65,48,32,99,101,116,61,13,10,32,101,109,97,105,108,46,32,80,111,117,114,32,110,111,117,115,32,99,111,110,116,97,99,116,101,114,44,32,99,108,105,113,117,101,122,32,115,117,114,32,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,46,99,111,109,47,61,13,10,115,101,108,102,104,101,108,112,47,104,111,109,101,61,51,70,118,61,51,68,49,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,82,84,61,13,10,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,99,110,61,13,10,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,61,13,10,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,61,13,10,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,99,61,13,10,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,38,120,116,61,13,10,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,115,101,108,102,104,101,108,112,95,104,111,109,101,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,32,115,116,121,61,13,10,108,101,61,51,68,34,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,62,65,105,100,101,32,101,116,32,67,111,110,116,97,99,116,60,47,97,62,46,60,47,115,112,97,110,62,60,47,112,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,105,100,61,51,68,34,61,13,10,34,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,61,13,10,32,60,116,98,111,100,121,62,61,48,65,32,60,116,114,62,61,48,65,32,61,13,10,32,60,116,100,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,108,105,110,101,45,104,101,105,103,104,116,58,49,54,112,120,59,112,97,100,100,105,110,103,58,54,112,120,32,48,112,120,34,62,61,48,65,32,61,13,10,32,60,112,32,99,108,97,115,115,61,51,68,34,112,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,109,97,114,103,105,61,13,10,110,58,48,34,32,100,105,114,61,51,68,34,108,116,114,34,62,60,115,112,97,110,62,86,111,117,115,32,110,101,32,115,97,118,101,122,32,112,97,115,32,112,111,117,114,113,117,111,105,32,118,111,117,115,32,97,118,101,122,32,114,101,61,67,51,61,65,55,117,32,99,101,116,32,101,61,13,10,109,97,105,108,61,67,50,61,65,48,61,51,70,32,60,97,32,104,114,101,102,61,51,68,34,104,116,116,112,115,58,47,47,119,119,119,46,112,97,121,112,97,108,46,99,111,109,47,102,114,47,115,109,97,114,116,104,101,108,112,47,97,114,116,105,99,108,101,47,119,104,121,45,97,109,61,13,10,45,105,45,114,101,99,101,105,118,105,110,103,45,101,109,97,105,108,115,45,102,114,111,109,45,112,97,121,112,97,108,45,119,104,101,110,45,105,45,100,111,110,116,45,104,97,118,101,45,97,110,45,97,99,99,111,117,110,116,45,102,97,113,52,49,55,50,61,51,70,118,61,51,68,49,61,13,10,38,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,117,116,109,95,99,97,109,112,97,105,103,110,61,51,68,82,84,48,48,48,52,49,55,38,117,116,109,95,117,110,112,116,105,100,61,51,68,48,61,13,10,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,99,110,97,99,61,51,68,70,82,38,114,115,116,97,61,51,68,102,114,95,70,82,37,61,13,10,50,56,102,114,45,70,82,37,50,57,38,99,117,115,116,61,51,68,85,75,66,83,53,87,72,69,52,75,74,76,76,38,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,61,13,10,56,53,38,99,97,108,99,61,51,68,102,51,53,52,54,57,52,52,52,48,100,53,52,38,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,112,97,61,13,10,103,101,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,101,61,51,68,99,108,38,109,99,104,110,61,51,68,101,109,38,115,61,51,68,99,105,38,109,97,61,13,10,105,108,61,51,68,115,121,115,38,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,76,38,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,61,13,10,48,52,48,51,56,38,108,105,110,107,95,114,101,102,61,51,68,97,114,116,105,99,108,101,95,119,104,121,45,97,109,45,105,45,114,101,99,101,105,118,105,110,103,45,101,109,97,105,108,115,45,102,114,111,109,45,112,97,121,112,97,108,45,119,104,101,110,45,105,45,100,111,110,116,45,61,13,10,104,97,118,101,45,97,110,45,97,99,99,111,117,110,116,45,102,97,113,52,49,55,50,34,32,116,97,114,103,101,116,61,51,68,34,95,98,108,97,110,107,34,32,115,116,121,108,101,61,51,68,34,116,101,120,116,45,100,101,99,111,114,97,116,105,111,110,58,110,111,110,101,34,62,69,61,13,10,110,32,115,97,118,111,105,114,32,112,108,117,115,60,47,97,62,60,47,115,112,97,110,62,60,47,112,62,61,48,65,32,60,47,116,100,62,61,48,65,32,61,13,10,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,61,13,10,60,47,116,97,98,108,101,62,61,48,65,32,60,116,97,98,108,101,32,119,105,100,116,104,61,51,68,34,49,48,48,37,34,32,99,101,108,108,80,97,100,100,105,110,103,61,51,68,34,48,34,32,99,101,108,108,61,13,10,83,112,97,99,105,110,103,61,51,68,34,48,34,32,98,111,114,100,101,114,61,51,68,34,48,34,62,61,48,65,32,60,116,98,111,100,121,62,61,48,65,32,61,13,10,32,60,116,114,62,61,48,65,32,60,116,100,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,108,105,110,61,13,10,101,45,104,101,105,103,104,116,58,49,54,112,120,59,112,97,100,100,105,110,103,58,54,112,120,32,48,112,120,34,62,61,48,65,32,60,112,32,99,108,97,115,115,61,51,68,34,112,61,13,10,112,115,97,110,115,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,59,109,97,114,103,105,110,58,48,34,32,100,105,114,61,51,68,34,108,116,114,34,62,61,48,65,32,61,13,10,32,60,100,105,118,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,34,32,100,105,114,61,51,68,34,108,116,114,34,62,60,115,112,97,110,62,67,111,112,121,114,105,103,104,116,32,61,67,50,61,65,57,32,49,61,13,10,57,57,57,45,50,48,50,53,32,80,97,121,80,97,108,46,32,84,111,117,115,32,100,114,111,105,116,115,32,114,61,67,51,61,65,57,115,101,114,118,61,67,51,61,65,57,115,46,60,98,114,47,62,60,98,114,47,62,80,97,121,80,97,108,32,40,69,117,114,111,112,101,41,32,83,61,13,10,46,32,61,67,51,61,65,48,32,114,46,108,46,32,101,116,32,67,105,101,44,32,83,46,67,46,65,46,32,83,111,99,105,61,67,51,61,65,57,116,61,67,51,61,65,57,32,101,110,32,67,111,109,109,97,110,100,105,116,101,32,112,97,114,32,65,99,116,105,111,110,115,32,83,61,13,10,105,61,67,51,61,65,56,103,101,32,115,111,99,105,97,108,61,67,50,61,65,48,58,32,50,50,61,69,50,61,56,48,61,57,51,50,52,32,66,111,117,108,101,118,97,114,100,32,82,111,121,97,108,44,32,76,45,50,52,52,57,32,76,117,120,101,109,98,111,117,114,103,32,82,67,61,13,10,83,32,76,117,120,101,109,98,111,117,114,103,32,66,32,49,49,56,32,51,52,57,60,47,115,112,97,110,62,60,47,100,105,118,62,61,48,65,32,60,112,32,115,116,121,108,101,61,13,10,61,51,68,34,102,111,110,116,45,115,105,122,101,58,49,50,112,120,34,32,100,105,114,61,51,68,34,108,116,114,34,62,80,97,121,80,97,108,32,82,84,48,48,48,52,49,55,58,102,114,95,70,82,40,102,114,45,70,82,41,58,49,46,57,46,49,58,102,51,53,52,54,57,52,52,61,13,10,52,48,100,53,52,60,47,112,62,60,105,109,103,32,97,108,116,61,51,68,34,34,32,104,101,105,103,104,116,61,51,68,34,49,34,32,119,105,100,116,104,61,51,68,34,49,34,32,98,111,114,100,101,114,61,51,68,34,48,34,32,115,114,99,61,51,68,34,104,116,116,112,115,58,47,61,13,10,47,116,46,112,97,121,112,97,108,46,99,111,109,47,116,115,61,51,70,118,61,51,68,49,38,97,109,112,59,117,116,109,95,115,111,117,114,99,101,61,51,68,117,110,112,38,97,109,112,59,117,116,109,95,109,101,100,105,117,109,61,51,68,101,109,97,105,108,38,97,109,112,59,117,116,61,13,10,109,95,99,97,109,112,97,105,103,110,61,51,68,82,84,48,48,48,52,49,55,38,97,109,112,59,117,116,109,95,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,61,13,10,38,97,109,112,59,112,112,105,100,61,51,68,82,84,48,48,48,52,49,55,38,97,109,112,59,99,110,97,99,61,51,68,70,82,38,97,109,112,59,114,115,116,97,61,51,68,102,114,95,70,82,37,50,56,102,114,45,70,82,37,50,57,38,97,109,112,59,99,117,115,116,61,51,68,85,61,13,10,75,66,83,53,87,72,69,52,75,74,76,76,38,97,109,112,59,117,110,112,116,105,100,61,51,68,48,98,100,51,48,57,100,54,45,50,99,101,56,45,49,49,102,48,45,56,100,97,55,45,56,102,99,99,54,54,51,53,97,49,56,53,38,97,109,112,59,99,97,108,99,61,51,68,102,61,13,10,51,53,52,54,57,52,52,52,48,100,53,52,38,97,109,112,59,117,110,112,95,116,112,99,105,100,61,51,68,115,101,110,100,109,111,110,101,121,45,98,117,115,105,110,101,115,115,45,112,117,115,104,45,101,109,97,105,108,45,115,101,110,100,101,114,38,97,109,112,59,112,97,103,101,61,13,10,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,37,51,65,82,84,48,48,48,52,49,55,38,97,109,112,59,112,103,114,112,61,51,68,109,97,105,110,37,51,65,101,109,97,105,108,38,97,109,112,59,101,61,51,68,111,112,38,97,109,112,59,109,99,104,110,61,51,68,101,109,61,13,10,38,97,109,112,59,115,61,51,68,99,105,38,97,109,112,59,109,97,105,108,61,51,68,115,121,115,38,97,109,112,59,97,112,112,86,101,114,115,105,111,110,61,51,68,49,46,51,51,48,46,48,38,97,109,112,59,116,101,110,97,110,116,95,110,97,109,101,61,51,68,80,65,89,80,65,61,13,10,76,38,97,109,112,59,120,116,61,51,68,49,52,53,53,56,53,37,50,67,49,53,52,52,49,51,37,50,67,49,48,52,48,51,56,38,97,109,112,59,108,105,110,107,95,114,101,102,61,51,68,116,46,112,97,121,112,97,108,46,99,111,109,95,116,115,34,32,47,62,60,47,112,62,61,13,10,61,48,65,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,61,13,10,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,61,13,10,32,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,61,13,10,108,101,62,61,48,65,32,60,47,116,100,62,61,48,65,32,60,116,100,32,98,103,99,111,108,111,114,61,51,68,34,35,70,53,70,55,70,65,34,32,115,116,121,108,101,61,51,68,34,102,111,110,116,45,115,105,122,61,13,10,101,58,48,112,120,34,62,60,47,116,100,62,61,48,65,32,60,47,116,114,62,61,48,65,32,60,47,116,98,111,100,121,62,61,48,65,32,60,47,116,97,98,108,101,62,61,48,65,32,60,47,98,111,100,121,62,61,48,65,61,13,10,61,48,65,60,47,104,116,109,108,62,13,10,128,0,0,0,0,0,0,3,19,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    \n    let body = \"\";\n\n    let pubKey: [Field; 18] = [\n        1645003885880989295623766150751280997,\n        2174569705226889829148580618171971777,\n        2100177073841478837675346471731560077,\n        1535270495410311001656408469573001927,\n        1113031739580306770090988345822364931,\n        2397097954187278820403569128237254459,\n        1618768548016130774534538096494860270,\n        1123794478696849509632179124727572314,\n        2549255820981739173092979025394244610,\n        2022196966818402826891146489793673295,\n        1299084864298374338360638090266336100,\n        2030129173455650550832543148342446645,\n        1591655028217138791785625727234976433,\n        1255182648888748480937284730228851406,\n        1029459633506806203214316664110506468,\n        2356207208466383054375619844533491153,\n        4467777851874524777661901776647489,\n        0\n    ];\n\n    let signature: [Field; 18] = [\n        582975556633937978344168692903157506,\n        2057815103221417780005920026455492161,\n        373372788604308820127051367956465372,\n        2123902774039179545171262891294686503,\n        895258794978706328487867712447801578,\n        1576892111099555050552148136451706215,\n        2597381428275281933405678251897704520,\n        2104867206609482398376204028780426961,\n        2046501611404047561624205576614285712,\n        2140264940342300411122912094147502025,\n        319816313174604429602404879681620711,\n        927940255264254631731305601992192133,\n        170663412414259411057616227294290405,\n        545061408840274870493179787645071067,\n        1963450468818456507164013079805704247,\n        2042345540585647542792557447739001002,\n        3512729805478203556761487457290732,\n        0\n    ];\n\n    let precomputedSHA = [106,9,230,103,187,103,174,133,60,110,243,114,165,79,245,58,81,14,82,127,155,5,104,140,31,131,217,171,91,224,205,25];\n\n    let dkim = Sequence{ index: 4, length: 11 };\n\n    // main(\n    //     header,\n    //     body, \n    //     pubKey,\n    //     signature,\n    //     431,\n    //     dkim\n    // );\n\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/home/rere/Projects/zk-pal/circuits/src/main.nr"},"116":{"source":"use crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, RSA_EXPONENT};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::{RBN1024, RBN2048}};\nuse std::hash::{pedersen_hash, sha256_var};\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n\n    pub fn new(modulus: [Field; KEY_LIMBS], redc: [Field; KEY_LIMBS]) -> Self {\n        let pubkey = Self { modulus, redc };\n        pubkey\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_1024, 1024> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN1024 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        // validate\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 9];\n        // compose first 4 limbs of modulus and redc\n        for i in 0..4 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 4] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // compose last two elements of redc and modulus together\n        let modulus_hi = self.modulus[8] * 2.pow_32(120);\n        dkim_preimage[8] = modulus_hi + self.redc[8];\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_1024 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_1024 - 1].assert_max_bit_size::<1024 - ((KEY_LIMBS_1024 - 1) * 120)>();\n        self.redc[KEY_LIMBS_1024 - 1].assert_max_bit_size::<120>();\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_2048, 2048> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        // validate range\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 18];\n        // compose limbs\n        for i in 0..9 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 9] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_2048 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_2048 - 1].assert_max_bit_size::<2048 - ((KEY_LIMBS_2048 - 1) * 120)>();\n        self.redc[KEY_LIMBS_2048 - 1].assert_max_bit_size::<120>(); // we get 2053 sometimes?\n    }\n}\n","path":"/home/rere/nargo/github.com/zkemail/zkemail.nr/v0.4.2/lib/src/dkim.nr"},"162":{"source":"use crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_120: Field = 0x1000000000000000000000000000000;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> Field {\n    let TWO_POW_120 = 0x1000000000000000000000000000000;\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0]\n    } else if N == 2 {\n        validate_in_range::<N, MOD_BITS>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120 + limbs[2] * TWO_POW_120 * TWO_POW_120\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    field: Field,\n) -> [Field; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result = unsafe { __from_field::<N>(field) };\n\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        let TWO_POW_120 = 0x1000000000000000000000000000000;\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let field_val = if N < 2 {\n            result[0]\n        } else if N == 2 {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120\n        } else {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120 + result[2] * TWO_POW_120 * TWO_POW_120\n        };\n        assert(field_val == field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120;\n        r *= TWO_POW_120;\n        modulus_mod_n *= TWO_POW_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += params.modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [Field; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += borrow_flags[0] as Field * TWO_POW_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * TWO_POW_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    validate_in_range::<_, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb =\n            modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * TWO_POW_120);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * TWO_POW_120);\n            assert(result_limb == 0);\n        }\n        let result_limb =\n            modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb =\n            lhs[0] + rhs[0] - subtrahend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] + rhs[N - 1] - subtrahend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] - rhs[N - 1] + addend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/constrained_ops.nr"},"163":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/expressions.nr"},"165":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/serialization.nr"},"166":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [Field; N] {\n    // cast the field to a u60 representation\n    let res_u60: U60Repr<N, 2> = U60Repr::from_field(field);\n    let result: [Field; N] = U60Repr::into(res_u60);\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = From::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = From::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let b_u60: U60Repr<N, 2> = From::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                let idx = (i - 1) / 2;\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quirky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target.shr1();\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_helpers.nr"},"167":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..N {\n        let idx = N - 1 - i;\n        if (!__is_zero(x[idx])) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_ops.nr"},"169":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/params.nr"},"170":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    pub fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/runtime_bignum.nr"},"177":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\npub(crate) global TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n//fields to u60rep conversion\n// field elements are 254 bits\n// so there will be 5 limbs\npub(crate) unconstrained fn field_to_u60rep(mut x: Field) -> (u64, u64, u64, u64, u64) {\n    // get the first 60 bits by casting to u64 and then taking the lower 60 bits\n    // we use the fact that this casting drops everything above 64 bits\n    let x_first_u64 = (x as u64);\n    let first: u64 = x_first_u64 % TWO_POW_60;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_60 as Field);\n    let x_second_u64 = (x as u64);\n    let second = x_second_u64 % TWO_POW_60;\n    x = (x - (second as Field)) / (TWO_POW_60 as Field);\n    let x_third_u64 = (x as u64);\n    let third = x_third_u64 % TWO_POW_60;\n    x = (x - (third as Field)) / (TWO_POW_60 as Field);\n    let x_fourth_u64 = (x as u64);\n    let fourth = x_fourth_u64 % TWO_POW_60;\n    x = (x - (fourth as Field)) / (TWO_POW_60 as Field);\n    let x_fifth_u64 = (x as u64);\n    let fifth = x_fifth_u64 % TWO_POW_60;\n    (first, second, third, fourth, fifth)\n}\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\nunconstrained fn __split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\npub fn split_60_bits(x: Field) -> (u64, u64) {\n    // We assert that the two returned limbs fit within 60 bits each\n    // and reconstruct `x` when added together.\n    let (lo, hi) = unsafe { __split_60_bits(x) };\n    if !std::runtime::is_unconstrained() {\n        let lo_field = lo as Field;\n        let hi_field = hi as Field;\n        lo_field.assert_max_bit_size::<60>();\n        hi_field.assert_max_bit_size::<60>();\n        assert_eq(lo_field + (TWO_POW_60 as Field) * hi_field, x);\n    }\n\n    (lo, hi)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n\n        normalized[i] = lo;\n        next = input[i + 1] + hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/split_bits.nr"},"178":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\nuse crate::utils::split_bits::{field_to_u60rep, TWO_POW_60};\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..N {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\n// impl<let N: u32, let NumSegments: u32> std::convert::From<Field> for U60Repr<N, NumSegments> {\n//     fn from(input: Field) -> Self {\n//        let (low, mid, high) =  unsafe { field_to_u60rep(input) } ;\n//         let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n//         let N_u60: u32 = N * NumSegments;\n//         assert(N_u60 >=1, \"N must be at least 1\");\n//         if N_u60 == 1 {\n//             assert((mid ==0) & (high == 0), \"input field is too large to fit in a single limb\");\n//             result.limbs[0] = low;\n//         }\n//         else if N_u60 == 2{\n//             assert(high == 0, \"input field is too large to fit in two limbs\");\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//         }else{\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//             result.limbs[2] = high;\n//         }\n//         result\n//     }\n// }\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn from_field(input: Field) -> Self {\n        let (first, second, third, fourth, fifth) = field_to_u60rep(input);\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        let N_u60: u32 = N * NumSegments;\n        assert(N_u60 >= 1, \"N must be at least 1\");\n        if N_u60 == 1 {\n            assert(\n                (second == 0) & (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in a single limb\",\n            );\n            result.limbs[0] = first;\n        } else if N_u60 == 2 {\n            assert(\n                (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in two limbs\",\n            );\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n        } else if N_u60 == 3 {\n            assert((fourth == 0) & (fifth == 0), \"input field is too large to fit in three limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n        } else if N_u60 == 4 {\n            assert((fifth == 0), \"input field is too large to fit in four limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n        } else {\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n            result.limbs[4] = fifth;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        for i in 0..(N * NumSegments / 2) {\n            result[i] =\n                x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * TWO_POW_60 as Field);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            let idx = (N * NumSegments) - 1 - i;\n            if (b.limbs[idx] == self.limbs[idx]) {\n                continue;\n            }\n\n            result = b.limbs[idx] < self.limbs[idx];\n            early_exit = true;\n            break;\n        }\n        if early_exit {\n            result\n        } else {\n            self.limbs[0] == b.limbs[0]\n        }\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift = (60 - limb_shift) as u8;\n        let mask: u64 = (((1 as u64) << limb_shift) - 1) << remainder_shift;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = value >> limb_shift;\n            let remainder: u64 = (value << remainder_shift) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << limb_shift) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << limb_shift) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/u60_representation.nr"},"189":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/home/rere/nargo/github.com/noir-lang/noir_rsa/v0.5.1/lib/src/rsa.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","__split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","decompose_hint","directive_integer_quotient","directive_invert","directive_to_radix"]}